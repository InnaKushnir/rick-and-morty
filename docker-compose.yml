services:
  web:
    build: .
    ports:
      - "8000:8000"
    volumes:
      - ./:/code
    command: >
      sh -c "python manage.py wait_for_db &&
             python manage.py migrate &&
             python manage.py runserver 0.0.0.0:8000"

    env_file:
      - .env
    depends_on:
      - db
    links:
      - db:db
    networks:
      - djangonetwork


  db:
    image: postgres:14-alpine
    volumes:
      - ./data/db:/var/lib/postgresql/data
    env_file:
      - .env
    networks:
      - djangonetwork
    environment:
      - POSTGRES_HOST_AUTH_METHOD=trust
    ports:
      - "5432:5432"

  redis:
    image: "redis:alpine"

    networks:
      - djangonetwork

  celery:
    build:
      context: .
      dockerfile: Dockerfile
    command:
            "celery -A  rick_and_morty worker -l INFO -P solo "
    depends_on:
      - web
      - redis
      - db
    restart: on-failure
    env_file:
      - .env
    networks:
      - djangonetwork

  celery-beat:
    build:
      context: .
      dockerfile: Dockerfile
    command:
            "celery -A rick_and_morty beat -l INFO --scheduler django_celery_beat.schedulers:DatabaseScheduler"
    depends_on:
      - web
      - redis
      - db
    restart: on-failure
    environment:
      - POSTGRES_NAME=rick_and_morty
      - POSTGRES_USER=rick_and_morty_user
      - POSTGRES_PASSWORD=rick_and_morty_password
    networks:
      - djangonetwork

  flower:
    build:
      context: .
      dockerfile: Dockerfile
    ports:
      - "5555:5555"
    command: "celery -A rick_and_morty flower --address=0.0.0.0"
    depends_on:
      - celery
    env_file:
      - .env
    networks:
      - djangonetwork

networks:
  djangonetwork:
    driver: bridge
